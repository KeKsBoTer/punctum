#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2DArray img_shs;
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D img_out;
layout(set = 0, binding = 2) uniform SphericalHarmonicsCoefficients{
    vec4 coefs[36];
} sh;

ivec2 flat2lm_index(int i) {
    int l = int(sqrt(i));
    int m = l * (l+1) - i;
    return ivec2(l, m);
}


int lm2flat_index(int l,int m){
    return l * (l + 1) + m;
}


void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = ivec2(imageSize(img_out));

    if(idx.x >= size.x || idx.y >= size.y){
        return;
    }

    int num_sh = textureSize(img_shs,0).z;

    vec4 color = vec4(0);
    for(int i=0;i<num_sh;i++){
        ivec2 lm = flat2lm_index(i);
        vec4 coefs = sh.coefs[lm2flat_index(lm.x,lm.y)];
        color += coefs * texture(img_shs, vec3(vec2(idx)/vec2(size),i)).r;
        // color +=  texture(img_shs, vec3(vec2(idx)/vec2(size),i)).r;
    }
    imageStore(img_out, idx, vec4(color.rgb,1.));
}