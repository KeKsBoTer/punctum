#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform readonly image2D img_in;
layout(set = 0, binding = 1, rgba32f) uniform writeonly image2D img_out;


layout(push_constant) uniform PushConstantData {
    bool first;
} pc;

void main() {
    ivec2 idx = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = ivec2(imageSize(img_out));

    if(idx.x >= size.x || idx.y >= size.y){
        return;
    }

    ivec2 idx_src = 2*idx;
    vec4 c1 = imageLoad(img_in, idx_src + ivec2(0,0));
    vec4 c2 = imageLoad(img_in, idx_src + ivec2(1,0));
    vec4 c3 = imageLoad(img_in, idx_src + ivec2(0,1));
    vec4 c4 = imageLoad(img_in, idx_src + ivec2(1,1));

    // set alphas to one if we are not in the first iteration
    // we only do alpha weighting in the first iteration
    vec4 alphas = vec4(c1.a,c2.a,c3.a,c4.a) * float(pc.first) + (1-float(pc.first));
    vec3 color = (
          c1.rgb * alphas.x 
        + c2.rgb * alphas.y 
        + c3.rgb * alphas.z 
        + c4.rgb * alphas.w
    ) ;
    float avg_alpha = (c1.a + c2.a + c3.a + c4.a);

    imageStore(img_out, idx, vec4(color, avg_alpha));
}